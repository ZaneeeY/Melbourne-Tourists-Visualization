m0<- ggplot(auBirthMapDf)
m1 <- aes(long, lat, group=group, fill=rank)
m2 <- geom_polygon()
m3 <- scale_fill_brewer(type="seq", palette=7)
m4 <- geom_path(color='dark grey')
m5 <- theme(panel.background = element_rect(fill="white"))
m0 + m1 + m2 + m3 + m4 + m5
##################Improvements (Exercise 2)
###### Clearer labels for the legend
m3 <- scale_fill_brewer(type="seq", palette=7, name = "Number of births",
labels = c("3882-27058", "27059-50236", "50237-73413", "73414-96590", ">96590"))
m0 + m1 + m2 + m3 + m4 + m5
# Read and display data
#auMap <- readOGR(dsn="your_file_path", "AusStates")
auMap <- readOGR(dsn=file.choose(), "AusStates")
#auBirth <- read.csv("your_file_path/Births_summary_with_id.csv", stringsAsFactors = FALSE)
auBirth <- read.csv(dsn=file.choose(), stringsAsFactors = FALSE)
auMapDf <- fortify(auMap)
# Merging (joining) data
auBirthMapDf <- merge(auMapDf, auBirth, by.x="id", by.y="id")
# Classification: the equal interval method
intervals <- classIntervals(auBirthMapDf$X2017, n=4, style="equal")
# Classification: different classification methods (Exercise 1)
intervals <- classIntervals(auBirthMapDf$X2017, n=4, style="quantile")
intervals <- classIntervals(auBirthMapDf$X2017, n=4, style="kmeans")
intervals <- classIntervals(auBirthMapDf$X2017, n=4, style="pretty")
intervals <- classIntervals(auBirthMapDf$X2017, n=4, style="fisher")
auBirthMapDf$rank <- as.factor(findInterval(intervals$var, intervals$brks))
m0<- ggplot(auBirthMapDf)
m1 <- aes(long, lat, group=group, fill=rank)
m2 <- geom_polygon()
m3 <- scale_fill_brewer(type="seq", palette=7)
m4 <- geom_path(color='dark grey')
m5 <- theme(panel.background = element_rect(fill="white"))
m0 + m1 + m2 + m3 + m4 + m5
##################Improvements (Exercise 2)
###### Clearer labels for the legend
m3 <- scale_fill_brewer(type="seq", palette=7, name = "Number of births",
labels = c("3882-27058", "27059-50236", "50237-73413", "73414-96590", ">96590"))
m0 + m1 + m2 + m3 + m4 + m5
###### Title
m6 <- ggtitle("The number of births in different states of Australia in 2017")
m0 + m1 + m2 + m3 + m4 + m5 + m6
###### Thinner lines for country boundaries
m4 <- geom_path(color='dark grey', size = 0.02)
m0 + m1 + m2 + m3 + m4 + m5 + m6
###### Removing the "lat" and "long" labels
m7 <- xlab("")
m8 <- ylab("")
m9 <- theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
m0 + m1 + m2 + m3 + m4 + m5 + m6 + m7 + m8 + m9
###### Adding base map backgrounds (investigate the "ggmap" package for this)
install.packages("ggmap")
library(ggmap)
myLocation <- c(bottom = -50, top = 0, right = 170, left = 110)
# get_googlemap, get_openstreetmap, get_stamenmap, get_cloudmademap
basemap <- get_stamenmap(bbox = myLocation, zoom=6, maptype = "toner-lite")
m22 <- geom_polygon(data = auBirthMapDf, aes(long, lat, group=group, fill=rank))
library(maptools)
library(rgdal)
library(ggplot2)
library(mapproj)
library(classInt)
library(RColorBrewer)
library(tidyr)
# Read and display data
#auMap <- readOGR(dsn="your_file_path", "AusStates")
auMap <- readOGR(dsn=file.choose(), "AusStates")
#auBirth <- read.csv("your_file_path/Births_summary_with_id.csv", stringsAsFactors = FALSE)
auBirth <- read.csv(dsn=file.choose(), stringsAsFactors = FALSE)
#auBirth <- read.csv("your_file_path/Births_summary_with_id.csv", stringsAsFactors = FALSE)
auBirth <- read.csv(file.choose(), stringsAsFactors = FALSE)
auMapDf <- fortify(auMap)
# Merging (joining) data
auBirthMapDf <- merge(auMapDf, auBirth, by.x="id", by.y="id")
# Classification: the equal interval method
intervals <- classIntervals(auBirthMapDf$X2017, n=4, style="equal")
# Classification: different classification methods (Exercise 1)
intervals <- classIntervals(auBirthMapDf$X2017, n=4, style="quantile")
intervals <- classIntervals(auBirthMapDf$X2017, n=4, style="kmeans")
intervals <- classIntervals(auBirthMapDf$X2017, n=4, style="pretty")
intervals <- classIntervals(auBirthMapDf$X2017, n=4, style="fisher")
auBirthMapDf$rank <- as.factor(findInterval(intervals$var, intervals$brks))
m0<- ggplot(auBirthMapDf)
m1 <- aes(long, lat, group=group, fill=rank)
m2 <- geom_polygon()
m3 <- scale_fill_brewer(type="seq", palette=7)
m4 <- geom_path(color='dark grey')
m5 <- theme(panel.background = element_rect(fill="white"))
m0 + m1 + m2 + m3 + m4 + m5
m3 <- scale_fill_brewer(type="seq", palette=7, name = "Number of births",
labels = c("3882-27058", "27059-50236", "50237-73413", "73414-96590", ">96590"))
m0 + m1 + m2 + m3 + m4 + m5
m6 <- ggtitle("The number of births in different states of Australia in 2017")
m0 + m1 + m2 + m3 + m4 + m5 + m6
m4 <- geom_path(color='dark grey', size = 0.02)
m0 + m1 + m2 + m3 + m4 + m5 + m6
m7 <- xlab("")
m8 <- ylab("")
m9 <- theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
m0 + m1 + m2 + m3 + m4 + m5 + m6 + m7 + m8 + m9
m0 + m1 + m2 + m3 + m4 + m5 + m6 + m7 + m8
+ m9
m0 + m1 + m2 + m3 + m4 + m5 + m6 + m7 + m8 + m9
library(ggmap)
myLocation <- c(bottom = -50, top = 0, right = 170, left = 110)
# get_googlemap, get_openstreetmap, get_stamenmap, get_cloudmademap
basemap <- get_stamenmap(bbox = myLocation, zoom=6, maptype = "toner-lite")
m22 <- geom_polygon(data = auBirthMapDf, aes(long, lat, group=group, fill=rank))
ggmap(basemap)+ m22 + m3 + m4 + m5 + m6 + m7 + m8
m0 + m1 + m2 + m3 + m4 + m5
m0 + m1 + m2 + m4 + m5
m0 + m1 + m2 + m3 + m4 + m5
install.packages("shiny")
shinyApp(ui, server)
library("shiny")
ui <- 'Hello world!'
server <- function(input, output, session) {
}
shinyApp(ui, server)
library("shiny")
ui <- 'Hello world!'
server <- function(input, output, session) {
}
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step1.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step1.r')
install.packages("ggiraph")
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step1.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step1.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step1.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step2.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step1.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step2.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step2.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step2.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step1.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step1.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-prelab-step4.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-prelab-step3.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-prelab-step4.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-prelab-step3.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-prelab-step3.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-prelab-step4.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-prelab-step3.r')
#' ggbump extensions to ggplot2
#'
#' These ggproto objects are participate in the ggproto class extension
#' mechanism provided by ggplot2. They are typically of no concern, as they can
#' be used through the `geom_*()` functions.
#'
#' @name ggbump-ggproto
#' @rdname ggbump-ggproto
NULL
#' ggbump extensions to ggplot2
#'
#' These ggproto objects are participate in the ggproto class extension
#' mechanism provided by ggplot2. They are typically of no concern, as they can
#' be used through the `geom_*()` functions.
#'
#' @name ggbump-ggproto
#' @rdname ggbump-ggproto
NULL
#' ggbump extensions to ggplot2
#'
#' These ggproto objects are participate in the ggproto class extension
#' mechanism provided by ggplot2. They are typically of no concern, as they can
#' be used through the `geom_*()` functions.
#'
#' @name ggbump-ggproto
#' @rdname ggbump-ggproto
NULL
#' @export
#' @format NULL
#' @usage NULL
#' @rdname ggbump-ggproto
StatBump <- ggplot2::ggproto("StatBump", ggplot2::Stat,
setup_data = function(data, params) {
# Create x_lag, and y_lag to be passed to `compute_group`
# Factors need this to be able to compute a sigmoid function
data <- data %>%
dplyr::mutate(r = dplyr::row_number()) %>%
dplyr::arrange(x) %>%
dplyr::group_by_at(vars(-PANEL, -group, -x, -y, -r)) %>%
dplyr::mutate(x_lag = dplyr::lag(x),
y_lag = dplyr::lag(y)) %>%
dplyr::ungroup() %>%
dplyr::arrange(r) %>%
dplyr::select(-.data$r) %>%
as.data.frame()
data
},
compute_group = function(data, scales, smooth = 8, direction = "x") {
data <- data %>%
dplyr::arrange(x)
# Handling of the special case of factors
# Factors come as a df with one row
if(nrow(data) == 1) {
if(is.na(data$x_lag) | is.na(data$y_lag)) {
return(data %>% dplyr::slice(0))
} else {
out <- sigmoid(data$x_lag, data$x, data$y_lag, data$y,
smooth = smooth, direction = direction)
return(as.data.frame(out))
}
}
# Normal case
out <-rank_sigmoid(data$x, data$y, smooth = smooth, direction = direction) %>%
dplyr::mutate(key = 1) %>%
dplyr::left_join(data %>%
dplyr::select(-x, -y) %>%
dplyr::mutate(key = 1) %>%
dplyr::distinct(),
by = "key") %>%
dplyr::select(-key) %>%
as.data.frame()
out
},
required_aes = c("x", "y")
)
#' # Contingous x axis
#' ggplot(df, aes(year, rank, color = country)) +
#'   geom_point(size = 10) +
#'   geom_bump(size = 2)
#'
#' # Discrete x axis
#' ggplot(df, aes(month, rank, color = country)) +
#'   geom_bump(size = 2)
#'
#' @export
geom_bump <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
smooth = 8, direction = "x", inherit.aes = TRUE, ...) {
ggplot2::layer(
stat = StatBump, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, smooth = smooth, direction = direction, ...)
)
}
#' @export
#' @format NULL
#' @usage NULL
#' @rdname ggbump-ggproto
StatSigmoid <- ggplot2::ggproto("StatSigmoid", ggplot2::Stat,
setup_data = function(data, params) {
data <- data %>%
dplyr::group_by(PANEL) %>%
dplyr::mutate(group = dplyr::row_number()) %>%
as.data.frame()
data %>% print()
data
},
compute_group = function(data, scales, smooth = 8, direction = "x") {
out <- sigmoid(data$x, data$xend, data$y, data$yend,
smooth = smooth, direction = direction)
out
},
required_aes = c("x", "y", "xend", "yend")
)
#' library(ggplot2)
#' df <- data.frame(x = 1:6,
#'        y = 5:10,
#'        xend = 7,
#'        yend = -3:2)
#'
#' ggplot(df, aes(x = x, xend = xend, y = y, yend = yend, color = factor(x))) +
#'   geom_sigmoid()
#'
#' @export
geom_sigmoid <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
smooth = 8, direction = "x", inherit.aes = TRUE, ...) {
ggplot2::layer(
stat = StatSigmoid, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, smooth = smooth, direction = direction, ...)
)
}
#' @param x_to end x value
#' @param y_from start y value
#' @param y_to end y values
#' @param n number of point that should be smoothed
#' @param smooth smooth parameter. Higher means less smoothing
#' @param direction the character x or y depending on direction of smoothing
#'
#' @return a data frame
#'
#' @export
sigmoid <- function(x_from, x_to, y_from, y_to, smooth = 5, n = 100, direction = "x") {
if(!direction %in% c("x", "y")) {stop("Only the directions x or y is allowed.")}
if(direction == "x") {
x <- seq(-smooth, smooth, length = n)
y <- exp(x) / (exp(x) + 1)
out <- data.frame(x = (x + smooth) / (smooth * 2) * (x_to - x_from) + x_from,
y = y * (y_to - y_from) + y_from)
}
if(direction == "y") {
y <- seq(-smooth, smooth, length = n)
x <- exp(y) / (exp(y) + 1)
out <- data.frame(y = (y + smooth) / (smooth * 2) * (y_to - y_from) + y_from,
x = x * (x_to - x_from) + x_from)
}
out
}
#' Creates a longer dataframe with coordinates for a smoothed line.
#'
#' @param x vector
#' @param y vector
#' @param smooth smooth parameter. Higher means less smoothing
#' @param direction the character x or y depending of smoothing direction
#'
#' @return a data frame
#'
#' @export
rank_sigmoid <- function(x, y, smooth = 8, direction = "x") {
.df <- dplyr::tibble(x = x,
y = y) %>%
dplyr::mutate(x_lag = dplyr::lag(x),
y_lag = dplyr::lag(y)) %>%
tidyr::drop_na("x_lag")
purrr::pmap_dfr(.df, ~sigmoid(x_from = ..3, x_to = ..1, y_from = ..4, y_to = ..2, smooth  = smooth, direction = direction))
}
#' Pipe operator
#'
#' See \code{magrittr::\link[magrittr:pipe]{\%>\%}} for details.
#'
#' @name %>%
#' @rdname pipe
#' @keywords internal
#' @export
#' @importFrom magrittr %>%
#' @usage lhs \%>\% rhs
NULL
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-final.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-final.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-final.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-final.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step1.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step1.r')
install.packages('leaflet')
install.packages("leaflet")
library(leaflet)
names(providers)
hospitals_tab <- tabPanel(
title='Hospitals',
leafletOutput('map_hospitals', height=600)
)
ui <- navbarPage(
title='Population growth in Australia',
births_tab,
hospitals_tab
)
library(shiny); runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step2.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step2.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step1.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step1.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step1.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step1.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step1.r')
runApp('Programs/R Language/Week 6/Ref/lab6-solutions/lab6-step2.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step1.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step1.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step1.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2-withExercise4.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2-withExercise4.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2-withExercise4.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2-withExercise4.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2-withExercise4.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2-withExercise4.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2-withExercise4.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2-withExercise4.r')
library(leaflet)
install.packages(leaflet)
install.packages("leaflet")
install.packages("leaflet")
library(shiny); runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2-withExercise4.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-final.r')
install.packages("leafpop")
install.packages("leafpop")
library(shiny); runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2-withExercise4.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2-withExercise4.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2-withExercise4.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2-withExercise4.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-prelab-step2.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-final.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-final.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-final.r')
library(shiny); runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
library(shiny); runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/Demo/lab7-final.r')
runApp('Programs/R Language/A2/Demo/lab7-final.r')
runApp('Programs/R Language/A2/Demo/lab7-final.r')
runApp('Programs/R Language/A2/Demo/lab7-final.r')
runApp('Programs/R Language/A2/Demo/lab7-final.r')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/Demo/lab7-final.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-final.r')
runApp('Programs/R Language/Week 7/Ref/lab7-solutions/lab7-final.r')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
library(shiny); runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
library(shiny); runApp('Programs/R Language/A2/A2.R')
runApp('Programs/R Language/A2/A2.R')
library(shiny); runApp('Programs/R Language/A3/Melbourne-Tourists-Visualization/A3.R')
runApp('Programs/R Language/A3/Melbourne-Tourists-Visualization/A3.R')
